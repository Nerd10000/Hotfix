/*
    File: Hotfix.java
 * This source file was generated by the Gradle 'init' task
 */
package me.dragon.hotfix.core;

import static net.bytebuddy.matcher.ElementMatchers.named;

import java.util.ArrayList;
import java.util.List;

import me.dragon.hotfix.core.listeners.UniversalPatchStrategy;
import net.bytebuddy.ByteBuddy;
import net.bytebuddy.agent.ByteBuddyAgent;
import net.bytebuddy.agent.builder.AgentBuilder;
import net.bytebuddy.dynamic.loading.ClassReloadingStrategy;
import net.bytebuddy.implementation.MethodDelegation;
import net.bytebuddy.matcher.ElementMatcher;

public class Hotfix {
    public final static  AgentBuilder AGENT_BUILDER = new AgentBuilder.Default();;
    public final static ByteBuddy BYTE_BUDDY = new ByteBuddy();
    private static boolean prepared = false;
    private static final List<PatchDescription> PATCHES = new ArrayList<>();

    /**
     * Prepare the Hotfix system. Call this before registering any patches.
     */
    public static final void prepare() {
        ByteBuddyAgent.install();
        System.out.println("[⚡Hotfix] [ByteBuddyAgent] Enabling Hotfix bytecode manipulation system...Done");
        prepared = true;
    }

    public static void registerPatch(PatchDescription patch) {
        PATCHES.add(patch);
    }
     /**
     * Applies all the patches at once. Run after you added the checks
     * 
     * @exception Exception
     */
    
    public static void applyAll(){
        if(prepared){
            for(PatchDescription patch : PATCHES){
                
                try {
                    if (patch.targetClass == null) {
                        System.out.println("[⚡Hotfix] [Patch Failed] " + patch.name + " by " + patch.author);
                        System.err.println("[⚡Hotfix] [Error] Target class is null. Did you set it correctly?");
                        continue;
                    }else if (patch.targetFunctionName == null || patch.targetFunctionName.isEmpty()) {
                        System.out.println("[⚡Hotfix] [Patch Failed] " + patch.name + " by " + patch.author);
                        System.err.println("[⚡Hotfix] [Error] Target function name is null or empty. Did you set it correctly?");
                        continue;
                    }else if (patch.delegateClass == null) {
                        System.out.println("[⚡Hotfix] [Patch Failed] " + patch.name + " by " + patch.author);
                        System.err.println("[⚡Hotfix] [Error] Delegate class is null. Did you set it correctly?");
                        continue;
                    }
                    BYTE_BUDDY
                        .redefine(patch.targetClass)
                        .method(named(patch.targetFunctionName))
                        .intercept(MethodDelegation.to(patch.delegateClass))
                        .make()
                        .load(patch.targetClass.getClassLoader(), ClassReloadingStrategy.fromInstalledAgent());
                    System.out.println("[⚡Hotfix] [Patch Applied] " + patch.name + " by " + patch.author);

                } catch (Exception e) {
                    System.err.println("[⚡Hotfix] [Patch Failed] " + patch.name + " by " + patch.author);
                    e.printStackTrace();
                }
            }
        }
    }
    public static List<PatchDescription> getPatches() {
        return PATCHES;
    }

    public static int getPatchesCount() {
        return PATCHES.size();
    }

    public static boolean isEmpty() {
        return PATCHES.isEmpty();
    }

    public static void clearPatches() {
        PATCHES.clear();
    }

   

    public static boolean isPrepared() {
        return prepared;
    }

}
